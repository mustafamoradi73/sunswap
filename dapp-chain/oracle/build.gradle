/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.8/userguide/tutorial_java_projects.html
 */
buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.3'
    }
}

group 'org.tron'
version '1.0.0'

apply plugin: 'java'
apply plugin: 'com.google.protobuf'
apply plugin: 'application'
apply plugin: 'checkstyle'

// Define the main class for the application
mainClassName = 'App'
jar {
    from(sourceSets.main.output) {
        include "/**"
    }
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    manifest {
        attributes 'Main-Class': 'org.tron.service.App'
    }
}
dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    compile 'com.google.guava:guava:23.0'
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.4.0'
    // google grpc
    compile group: 'io.grpc', name: 'grpc-netty', version: '1.14.0'
    compile group: 'io.grpc', name: 'grpc-protobuf', version: '1.14.0'
    compile group: 'io.grpc', name: 'grpc-stub', version: '1.14.0'
    // end google grpc
    compile group: 'com.google.api.grpc', name: 'googleapis-common-protos', version: '0.0.3'
    // https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    compile group: 'org.projectlombok', name: 'lombok', version: '1.18.6'
    // https://mvnrepository.com/artifact/org.apache.kafka/kafka-clients
    compile group: 'org.apache.kafka', name: 'kafka-clients', version: '2.2.0'

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    //compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.25'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    // https://mvnrepository.com/artifact/junit/junit
    testCompile group: 'junit', name: 'junit', version: '4.12'

    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.3.5'

    compile "com.madgag.spongycastle:prov:1.53.0.0"

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'

    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.4'
    compile 'com.fasterxml.jackson.core:jackson-core:2.6.4'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.6.4'

    // https://mvnrepository.com/artifact/org.fusesource.leveldbjni/leveldbjni-all
    compile group: 'org.fusesource.leveldbjni', name: 'leveldbjni-all', version: '1.8'
    
    // https://mvnrepository.com/artifact/org.iq80.leveldb/leveldb
    compile group: 'org.iq80.leveldb', name: 'leveldb', version: '0.7'

    compile group: 'com.beust', name: 'jcommander', version: '1.72'
    compile group: 'com.typesafe', name: 'config', version: '1.3.2'

    compile group: 'org.springframework', name: 'spring-context', version: '4.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-tx', version: '4.2.0.RELEASE'
}
// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}
def versions = [
        checkstyle: '8.7',
]

check.dependsOn 'lint'

checkstyle {
    toolVersion = "${versions.checkstyle}"
    configFile = file("config/checkstyle/checkStyleAll.xml")
}


checkstyleMain {
    source = 'src/main/java'
}

task lint(type: Checkstyle) {
    // Cleaning the old log because of the creation of the new ones (not sure if totaly needed)
    delete fileTree(dir: "${project.rootDir}/app/build/reports")
    source 'src'
    include '**/*.java'
    exclude 'main/gen/**'
    exclude 'test/**'
    // empty classpath
    classpath = files()
    //Failing the build
    ignoreFailures = false
}

sourceSets {
    main {
        proto {
            srcDir 'src/main/protos'
        }
        java {
            srcDir 'src/main/gen'
            srcDir 'src/main/java'
        }
    }

}
protobuf {
    generatedFilesBaseDir = "$projectDir/src/"
    protoc {
        artifact = "com.google.protobuf:protoc:3.5.1-1"
    }

    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.9.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java { outputSubDir = "gen" }
            }
        }
        all()*.plugins {
            grpc {
                outputSubDir = "gen"
            }
        }
    }
}

def binaryRelease(taskName, jarName, mainClass) {
    return tasks.create("${taskName}", Jar) {
        baseName = jarName
        version = null
        from(sourceSets.main.output) {
            include "/**"
        }

        from {
            configurations.compile.collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }

        manifest {
            attributes "Main-Class": "${mainClass}"
        }
    }
}
artifacts {
    archives(binaryRelease('oracleAppJar', 'oracle', 'org.tron.service.App'),
            binaryRelease('keystoreFectoryJar', 'keystoreFectory', 'org.tron.service.KeystoreFactory'))
}