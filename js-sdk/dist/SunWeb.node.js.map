{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","SunWeb","mainchain","sidechain","mainGatewayAddress","sideGatewayAddress","sideChainId","this","isAddress","utils","setMainGatewayAddress","setSideGatewayAddress","setChainId","injectPromise","promiseInjector","validator","trx","self","sign","multiSign","Error","isString","chainId","priKeyBytes","transaction","code","hexStr2byteArray","chainIdByteArr","byteArr","txID","concat","byteArrHash","ethersUtils","sha256","signature","crypto","ECKeySign","replace","Array","isArray","includes","push","privateKey","defaultPrivateKey","permissionId","callback","isFunction","isObject","raw_data","contract","Permission_id","address","toHex","fromPrivateKey","toLowerCase","getSignWeight","signWeight","result","message","foundKey","permission","keys","map","approved_list","indexOf","signTransaction","useTronHeader","multisig","isHex","signatureHex","signString","parameter","owner_address","callValue","depositFee","feeLimit","options","depositTrx","notValid","type","gte","gt","lte","Number","at","contractInstance","depositTRX","send","tokenId","tokenValue","depositTrc10","depositTRC10","functionSelector","num","fee","contractAddress","depositTrc","approveInstance","approve","depositTRC20","depositTRC721","retryDeposit","retryMapping","id","trxHash","mappingFee","mappingTrc","startsWith","mappingTRC20","mappingTRC721","withdrawFee","withdrawTrx","withdrawTRX","withdrawTrc10","withdrawTRC10","numOrId","withdrawTrc","parameters","defaultAddress","base58","transactionBuilder","triggerSmartContract","JSON","stringify","signedTransaction","sendRawTransaction","broadcast","err","error","toUtf8","shouldPollResponse","checkResult","a","index","getTransactionInfo","output","length","setTimeout","resMessage","hasProperty","rawResponse","decoded","decodeOutput","outputs","contractResult","injectFund","hexAddress","fullNode","request","amount","nonce","retryWithdrawFee","retryDepositFee","retryMappingFee"],"mappings":"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","file":"SunWeb.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","export default class SunWeb {\n    constructor(mainchain = false, sidechain = false, mainGatewayAddress = false, sideGatewayAddress = false, sideChainId = false) {\n        this.mainchain = mainchain;\n        this.sidechain = sidechain;\n        this.isAddress = this.mainchain.isAddress;\n        this.utils = this.mainchain.utils;\n        this.setMainGatewayAddress(mainGatewayAddress);\n        this.setSideGatewayAddress(sideGatewayAddress);\n        this.setChainId(sideChainId);\n        this.injectPromise = this.utils.promiseInjector(this);\n        this.validator = this.mainchain.trx.validator;\n\n        const self = this;\n        this.sidechain.trx.sign = (...args) => {\n            return self.sign(...args);\n        };\n        this.sidechain.trx.multiSign = (...args) => {\n            return self.multiSign(...args);\n        };\n    }\n    setMainGatewayAddress(mainGatewayAddress) {\n        if (!this.isAddress(mainGatewayAddress))\n            throw new Error('Invalid main gateway address provided');\n        this.mainGatewayAddress = mainGatewayAddress;\n    }\n\n    setSideGatewayAddress(sideGatewayAddress) {\n        if (!this.isAddress(sideGatewayAddress))\n            throw new Error('Invalid side gateway address provided');\n        this.sideGatewayAddress = sideGatewayAddress;\n    }\n\n    setChainId(sideChainId) {\n        if (!this.utils.isString(sideChainId) || !sideChainId)\n            throw new Error('Invalid side chainId provided');\n        this.chainId = sideChainId;\n    }\n\n    signTransaction(priKeyBytes, transaction) {\n        if (typeof priKeyBytes === 'string') {\n            priKeyBytes = this.utils.code.hexStr2byteArray(priKeyBytes);\n        }\n        let chainIdByteArr = this.utils.code.hexStr2byteArray(this.chainId);\n\n        let byteArr = this.utils.code.hexStr2byteArray(transaction.txID).concat(chainIdByteArr);\n        let byteArrHash = this.sidechain.utils.ethersUtils.sha256(byteArr);\n\n        const signature = this.utils.crypto.ECKeySign(this.utils.code.hexStr2byteArray(byteArrHash.replace(/^0x/, '')), priKeyBytes);\n\n        if (Array.isArray(transaction.signature)) {\n            if (!transaction.signature.includes(signature))\n                transaction.signature.push(signature);\n        } else\n            transaction.signature = [signature];\n        return transaction;\n    }\n\n    async multiSign(transaction = false, privateKey = this.sidechain.defaultPrivateKey, permissionId = false, callback = false) {\n        if (this.utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = 0;\n        }\n\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n            permissionId = 0;\n        }\n\n        if (!callback) return this.injectPromise(this.multiSign, transaction, privateKey, permissionId);\n\n        if (!this.utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract) return callback('Invalid transaction provided');\n\n        // set permission id\n        transaction.raw_data.contract[0].Permission_id = permissionId;\n\n        // check if private key insides permission list\n        const address = this.sidechain.address.toHex(this.sidechain.address.fromPrivateKey(privateKey)).toLowerCase();\n        const signWeight = await this.sidechain.trx.getSignWeight(transaction, permissionId);\n\n        if (signWeight.result.code === 'PERMISSION_ERROR') {\n           return callback(signWeight.result.message);\n        }\n\n        let foundKey = false;\n        signWeight.permission.keys.map(key => {\n           if (key.address === address) foundKey = true;\n        });\n\n        if (!foundKey) return callback(privateKey + ' has no permission to sign');\n\n        if (signWeight.approved_list && signWeight.approved_list.indexOf(address) != -1) {\n           return callback(privateKey + ' already sign transaction');\n        }\n\n        // reset transaction\n        if (signWeight.transaction && signWeight.transaction.transaction) {\n            transaction = signWeight.transaction.transaction;\n            transaction.raw_data.contract[0].Permission_id = permissionId;\n        } else {\n             return callback('Invalid transaction provided');\n        }\n\n        // sign\n        try {\n           return callback(null, this.signTransaction(privateKey, transaction));\n        } catch (ex) {\n           callback(ex);\n        }\n    }\n\n    async sign(transaction = false, privateKey = this.sidechain.defaultPrivateKey, useTronHeader = true, multisig = false, callback = false) {\n        if (this.utils.isFunction(multisig)) {\n            callback = multisig;\n            multisig = false;\n        }\n\n        if (this.utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.sidechain.defaultPrivateKey;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useTronHeader, multisig);\n\n        // Message signing\n        if (this.utils.isString(transaction)) {\n\n            if (!this.utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signatureHex = this.sidechain.trx.signString(transaction, privateKey, useTronHeader);\n                return callback(null, signatureHex);\n            } catch (ex) {\n                callback(ex);\n            }\n        }\n\n        if (!this.utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if (!multisig && transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            if (!multisig) {\n                const address = this.sidechain.address.toHex(\n                    this.sidechain.address.fromPrivateKey(privateKey)\n                ).toLowerCase();\n                if (address !== transaction.raw_data.contract[0].parameter.value.owner_address.toLowerCase())\n                    return callback('Private key does not match address in transaction');\n            }\n            return callback(null,\n                this.signTransaction(privateKey, transaction)\n            );\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n     /**\n     * deposit asset to sidechain\n     */\n    async depositTrx(\n        callValue,\n        depositFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrx, callValue, depositFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'depositFee',\n                type: 'integer',\n                value: depositFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            callValue: Number(callValue) + Number(depositFee),\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            const result = await contractInstance.depositTRX().send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async depositTrc10(\n        tokenId,\n        tokenValue,\n        depositFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrc10, tokenId, tokenValue, depositFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0\n            },\n            {\n                name: 'depositFee',\n                type: 'integer',\n                value: depositFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            tokenId,\n            tokenValue,\n            feeLimit,\n            ...options,\n            callValue: depositFee\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            const result = await contractInstance.depositTRC10(tokenId, tokenValue).send(options, privateKey);\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async depositTrc(\n        functionSelector,\n        num,\n        fee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrc, functionSelector, num, fee, feeLimit, contractAddress, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'functionSelector',\n                type: 'not-empty-string',\n                value: functionSelector\n            },\n            {\n                name: 'num',\n                type: 'integer',\n                value: num,\n                gte: 0\n            },\n            {\n                name: 'fee',\n                type: 'integer',\n                value: fee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            },\n            {\n                name: 'contractAddress',\n                type: 'address',\n                value: contractAddress\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            feeLimit,\n            ...options,\n            callValue: fee,\n            tokenId: '',\n            tokenValue: 0\n        };\n        try {\n            let result = null;\n            if (functionSelector === 'approve') {\n                const approveInstance = await this.mainchain.contract().at(contractAddress);\n                result = await approveInstance.approve(this.mainGatewayAddress, num).send(options, privateKey);\n            } else {\n                const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n                switch(functionSelector) {\n                    case 'depositTRC20':\n                        result = await contractInstance.depositTRC20(contractAddress, num).send(options, privateKey);\n                        break;\n                    case 'depositTRC721':\n                        result = await contractInstance.depositTRC721(contractAddress, num).send(options, privateKey);\n                        break;\n                    case 'retryDeposit':\n                        result = await contractInstance.retryDeposit(num).send(options, privateKey);\n                        break; \n                    case 'retryMapping':\n                        result = await contractInstance.retryMapping(num).send(options, privateKey);\n                        break;\n                    default:\n                        break;\n                }\n            }\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async approveTrc20(\n        num,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'approve';\n        return this.depositTrc(\n            functionSelector,\n            num,\n            0,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async approveTrc721(\n        id,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'approve';\n        return this.depositTrc(\n            functionSelector,\n            id,\n            0,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async depositTrc20(\n        num,\n        depositFee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'depositTRC20';\n        return this.depositTrc(\n            functionSelector,\n            num,\n            depositFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async depositTrc721(\n        id,\n        depositFee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'depositTRC721';\n        return this.depositTrc(\n            functionSelector,\n            id,\n            depositFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    /**\n     * mapping asset TRC20 or TRC721 to DAppChain\n     */\n    async mappingTrc(\n        trxHash,\n        mappingFee,\n        feeLimit,\n        functionSelector,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.mappingTrc, trxHash, mappingFee, feeLimit, functionSelector, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'trxHash',\n                type: 'not-empty-string',\n                value: trxHash\n            },\n            {\n                name: 'mappingFee',\n                type: 'integer',\n                value: mappingFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            }\n        ], callback)) {\n            return;\n        }\n        trxHash = trxHash.startsWith('0x') ? trxHash : ('0x' + trxHash);\n        options = {\n            feeLimit,\n            ...options,\n            callValue: mappingFee\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            let result = null;\n            if (functionSelector === 'mappingTRC20') {\n                result = await contractInstance.mappingTRC20(trxHash).send(options, privateKey);\n            } else if (functionSelector === 'mappingTRC721') {\n                result = await contractInstance.mappingTRC721(trxHash).send(options, privateKey);\n            } else {\n                callback(new Error('type must be trc20 or trc721'));\n            }\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async mappingTrc20(\n        trxHash,\n        mappingFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'mappingTRC20';\n        return this.mappingTrc(\n            trxHash,\n            mappingFee,\n            feeLimit,\n            functionSelector,\n            options,\n            privateKey,\n            callback);\n    }\n\n    async mappingTrc721(\n        trxHash,\n        mappingFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'mappingTRC721';\n        return this.mappingTrc(\n            trxHash,\n            mappingFee,\n            feeLimit,\n            functionSelector,\n            options,\n            privateKey,\n            callback);\n    }\n\n    /**\n     * withdraw trx from sidechain to mainchain\n     */\n    async withdrawTrx(\n        callValue,\n        withdrawFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrx, callValue, withdrawFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'withdrawFee',\n                type: 'integer',\n                value: withdrawFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            callValue: Number(callValue) + Number(withdrawFee),\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.sidechain.contract().at(this.sideGatewayAddress);\n            const result = await contractInstance.withdrawTRX().send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc10(\n        tokenId,\n        tokenValue,\n        withdrawFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrc10, tokenId, tokenValue, withdrawFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0\n            },\n            {\n                name: 'withdrawFee',\n                type: 'integer',\n                value: withdrawFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            tokenValue,\n            tokenId,\n            callValue: withdrawFee,\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.sidechain.contract().at(this.sideGatewayAddress);\n            const result = await contractInstance.withdrawTRC10(tokenId, tokenValue).send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc(\n        functionSelector,\n        numOrId,\n        withdrawFee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrc, functionSelector, numOrId, withdrawFee, feeLimit, contractAddress, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'functionSelector',\n                type: 'not-empty-string',\n                value: functionSelector\n            },\n            {\n                name: 'numOrId',\n                type: 'integer',\n                value: numOrId,\n                gte: 0\n            },\n            {\n                name: 'withdrawFee',\n                type: 'integer',\n                value: withdrawFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            },\n            {\n                name: 'contractAddress',\n                type: 'address',\n                value: contractAddress\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            feeLimit,\n            ...options,\n            callValue: withdrawFee\n        };\n        const parameters = [\n            {\n                type: 'uint256',\n                value: numOrId\n            }\n        ];\n\n        try {\n            const address = privateKey ? this.sidechain.address.fromPrivateKey(privateKey) : this.sidechain.defaultAddress.base58;\n            const transaction = await this.sidechain.transactionBuilder.triggerSmartContract(\n                contractAddress,\n                functionSelector,\n                options,\n                parameters,\n                this.sidechain.address.toHex(address)\n            );\n            if (!transaction.result || !transaction.result.result) {\n                return callback('Unknown error: ' + JSON.stringify(transaction.transaction, null, 2));\n            }\n\n            const signedTransaction = await this.sidechain.trx.sign(transaction.transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.sidechain.trx.sendRawTransaction(signedTransaction);\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.sidechain.toUtf8(broadcast.message);\n                return callback(err)\n            }\n\n            if (!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if (index == 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.sidechain.trx.getTransactionInfo(signedTransaction.txID);\n\n                if (!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if (output.result && output.result == 'FAILED') {\n                    return callback({\n                        error: this.sidechain.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (!utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (options.rawResponse)\n                    return callback(null, output);\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if (decoded.length === 1)\n                    decoded = decoded[0];\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc20(\n        num,\n        withdrawFee,\n        feeLimit,\n        contractAddress,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'withdrawal(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            num,\n            withdrawFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback);\n    }\n\n    async withdrawTrc721(\n        id,\n        withdrawFee,\n        feeLimit,\n        contractAddress,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'withdrawal(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            id,\n            withdrawFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback);\n    }\n\n\n    async injectFund(\n        num,\n        feeLimit,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.injectFund, num, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'num',\n                type: 'integer',\n                value: num,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            }\n        ], callback)) {\n            return;\n        }\n\n        try {\n            const address = this.sidechain.address.fromPrivateKey(privateKey);\n            const hexAddress = this.sidechain.address.toHex(address);\n            const transaction = await this.sidechain.fullNode.request('/wallet/fundinject', {\n                owner_address: hexAddress,\n                amount: num\n            }, 'post');\n\n            const signedTransaction = await this.sidechain.trx.sign(transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.sidechain.trx.sendRawTransaction(signedTransaction);\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.mainchain.toUtf8(broadcast.message);\n                return callback(err)\n            }\n            return callback(null, signedTransaction.txID);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async retryWithdraw(\n        nonce,\n        retryWithdrawFee,\n        feeLimit,\n        options = {},\n        privateKey = this.sidechain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryWithdraw(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            nonce,\n            retryWithdrawFee,\n            feeLimit,\n            this.sideGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async retryDeposit(\n        nonce,\n        retryDepositFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryDeposit';\n        return this.depositTrc(\n            functionSelector,\n            nonce,\n            retryDepositFee,\n            feeLimit,\n            this.mainGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async retryMapping(\n        nonce,\n        retryMappingFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryMapping';\n        return this.depositTrc(\n            functionSelector,\n            nonce,\n            retryMappingFee,\n            feeLimit,\n            this.mainGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n}\n\n"],"sourceRoot":""}